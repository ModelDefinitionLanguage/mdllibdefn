module eu.ddmore.mdllib.GenerateMdlLib

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var projectName = "eu.ddmore.mdllib"
var fileExtensions = "mlib"
var rootPath = ".."

Workflow {
	bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
	    		platformUri = rootPath
		    	projectMapping = {
				projectName = "${projectName}" 
				path = "${projectName}"
			}
	    		
	    		scanClassPath = true
    }
	
	// generate the EMF Model from the cutom definition.
	// need to do this before we use the XText generation.
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
        genModel = "platform:/resource/${projectName}/model/custom/MdlLib.genmodel"
        srcPath = "platform:/resource/${projectName}/emf-gen"
    }
	
    component = XtextGenerator {
        configuration = {
            project = StandardProjectConfig {
            		mavenLayout = false
                baseName = projectName
                rootPath = rootPath
                runtimeTest = {
                		enabled = true
                }
                eclipsePlugin = {
                    enabled = true
                }
                eclipsePluginTest = {
                		enabled = true
                }
                genericIde = {
                		enabled = true
                }
                
                createEclipseMetaData = true
            }
            code = {
                encoding = "UTF-8"
                preferXtendStubs = false
            }
        }
        language = XtextGeneratorLanguage {
            name = "eu.ddmore.mdllib.MdlLib"
            fileExtensions = fileExtensions
            referencedResource = "platform:/resource/${projectName}/model/custom/MdlLib.ecore"
            
//            fragment = ecore.EMFGeneratorFragment2{
//            		genModel = "platform:/resource/${projectName}/model/custom/MdlLib.genmodel"
//            }
            
            fragment = serializer.SerializerFragment2 {
            		generateStub = false
            }


    		fragment = grammarAccess.GrammarAccessFragment2 { }
    
    		// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment2 {}
    
    		// The antlr parser generator fragment.
    		fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
    		}
    
    		// Xtend-based API for validation
    		fragment = validation.ValidatorFragment2 {
    		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
    			composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
    			generateXtendStub = true
    		}
    
    		// scoping and exporting API
    		fragment = scoping.ImportNamespacesScopingFragment2 {
    			generateXtendStub = true
    		}
    		fragment = exporting.QualifiedNamesFragment2 {}
    		fragment = builder.BuilderIntegrationFragment2 {}
    
    		// generator API
    		fragment = generator.GeneratorFragment2 {
    			generateXtendMain = true
    			generateXtendStub = true
    		}
    
    		// formatter API
    		fragment = formatting.Formatter2Fragment2 {
    			generateXtendStub = true
    		}
    
    		// labeling API
    		fragment = ui.labeling.LabelProviderFragment2 {
    			generateXtendStub = true
    		}
    
    		// outline API
    		fragment = ui.outline.OutlineTreeProviderFragment2 {
    			generateXtendStub = true
    		}
    		fragment = ui.outline.QuickOutlineFragment2  {}
    
    		// quickfix API
    		fragment = ui.quickfix.QuickfixProviderFragment2 {
    			generateXtendStub = true
    		}
    
    		// content assist API
    		fragment = ui.contentAssist.ContentAssistFragment2 {
    			generateXtendStub = true
    		}
    
    		// generates junit test support classes into Generator#pathTestProject
    		fragment = junit.Junit4Fragment2 { }
    
    		// rename refactoring
    		fragment = ui.refactoring.RefactorElementNameFragment2 {}
    
    		// provides a preference page for template proposals
    		fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
    
    		// provides a compare view
    		fragment = ui.compare.CompareFragment2 {}
        }
    }
}

