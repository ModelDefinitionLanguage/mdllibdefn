module eu.ddmore.mdllib.GenerateMdlLib

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var projectName = "eu.ddmore.mdllib"
//var grammarURI = "platform:/resource/${projectName}/src/eu/ddmore/mdllib/MdlLib.xtext"
var fileExtensions = "mlib"
//var runtimeProject = "../${projectName}"
//var generateXtendStub = true
var rootPath = ".."

Workflow {
	
    component = XtextGenerator {
        configuration = {
            project = StandardProjectConfig {
            		mavenLayout = false
                baseName = projectName
                rootPath = rootPath
                runtimeTest = {
                		enabled = true
                }
                eclipsePlugin = {
                    enabled = true
                }
                eclipsePluginTest = {
                		enabled = true
                }
                genericIde = {
                		enabled = true
                }
                
                createEclipseMetaData = true
            }
            code = {
                encoding = "UTF-8"
                preferXtendStubs = false
            }
            
        }
        language = XtextGeneratorLanguage {
            name = "eu.ddmore.mdllib.MdlLib"
            fileExtensions = fileExtensions
            referencedResource = "platform:/resource/${projectName}/model/custom/MdlLib.genmodel"
            
            fragment = serializer.SerializerFragment2 {
            		generateStub = false
            }


    		fragment = grammarAccess.GrammarAccessFragment2 { }
    
    		// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment2 {}
    
    		// The antlr parser generator fragment.
    		fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
    		}
    
    		// Xtend-based API for validation
    		fragment = validation.ValidatorFragment2 {
    		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
    			composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
    			generateXtendStub = true
    		}
    
    		// scoping and exporting API
    		fragment = scoping.ImportNamespacesScopingFragment2 {
    			generateXtendStub = true
    		}
    		fragment = exporting.QualifiedNamesFragment2 {}
    		fragment = builder.BuilderIntegrationFragment2 {}
    
    		// generator API
    		fragment = generator.GeneratorFragment2 {
    			generateXtendMain = true
    			generateXtendStub = true
    		}
    
    		// formatter API
    		fragment = formatting.Formatter2Fragment2 {
    			generateXtendStub = true
    		}
    
    		// labeling API
    		fragment = ui.labeling.LabelProviderFragment2 {
    			generateXtendStub = true
    		}
    
    		// outline API
    		fragment = ui.outline.OutlineTreeProviderFragment2 {
    			generateXtendStub = true
    		}
    		fragment = ui.outline.QuickOutlineFragment2  {}
    
    		// quickfix API
    		fragment = ui.quickfix.QuickfixProviderFragment2 {
    			generateXtendStub = true
    		}
    
    		// content assist API
    		fragment = ui.contentAssist.ContentAssistFragment2 {
    			generateXtendStub = true
    		}
    
//    		// generates a more lightweight Antlr parser and lexer tailored for content assist
//    		fragment = Xtext parser.antlr.XtextAntlrUiGeneratorFragment {}
    
    		// generates junit test support classes into Generator#pathTestProject
    		fragment = junit.Junit4Fragment2 { }
    
//    		// project wizard (optional)
//    		fragment = projectWizard.SimpleProjectWizardFragment {
//    		      generatorProjectName = "${projectName}"
//    		      fileExtension="${fileExtensions}"
//    		}
    
    		// rename refactoring
    		fragment = ui.refactoring.RefactorElementNameFragment2 {}
    
    		// provides a preference page for template proposals
    		fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
    
    		// provides a compare view
    		fragment = ui.compare.CompareFragment2 {}
        }
    }
	
//    bean = StandaloneSetup {
//
//    	resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
//    	
//    	// for builds without .project file
//    	projectMapping = {
//			projectName = '${projectName}' 
//			path = '${runtimeProject}'
//		}
//    	platformUri = "${runtimeProject}/.."
//
//    }
//    
//	    component = DirectoryCleaner {
//	        directory = "${runtimeProject}/emf-gen"
//	    }
//
//        component = DirectoryCleaner {
//            directory = "${runtimeProject}/src-gen"
//        }
//    
////	    component = DirectoryCleaner {
////    		directory = "${runtimeProject}/model/generated"
////    	}
//    
//        component = DirectoryCleaner {
//            directory = "${runtimeProject}.ui/src-gen"
//        }
//    
//	    component = DirectoryCleaner {
//    		directory = "${runtimeProject}.tests/src-gen"
//    	}
//    
//		component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
//	        genModel = "platform:/resource/${projectName}/model/custom/MdlLib.genmodel"
//	        srcPath = "platform:/resource/${projectName}/src"
//		}
//
//    component = Generator {
//    	pathRtProject = runtimeProject
//    	pathUiProject = "${runtimeProject}.ui"
//    	pathTestProject = "${runtimeProject}.tests"
//    	projectNameRt = projectName
//    	projectNameUi = "${projectName}.ui"
//    	language = auto-inject {
//			loadedResource = "platform:/resource/${projectName}/model/custom/MdlLib.ecore"
//
//			forcedResourceSet = theResourceSet	
//
//    		uri = grammarURI
//    		fileExtensions = fileExtensions
//    		// Java API to access grammar elements (required by several other fragments)
//    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}
//    
//    		// generates Java API for the generated EPackages
////    		fragment = ecore.EMFGeneratorFragment auto-inject {
////    		// referencedGenModels = "
////    		//  platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
////    		//  platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
////    		// "
////    		}
//    
////    		fragment = ecore.EMFGeneratorFragment auto-inject {
////    			genModel = "platform:/resource/eu.ddmore.mdllib/model/custom/MdlLib.genmodel"
////    			javaModelDirectory = "emf-gen"
////    			basePackage = "eu.ddmore.mdllib.mdlLib"
////    		}
//
//    		// the old serialization component
//    		// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}    
//    
//    		// serializer 2.0
//    		fragment = serializer.SerializerFragment auto-inject {
//    			generateStub = false
//    		}
//    
//    		// a custom ResourceFactory for use with EMF
//    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
//    
//    		// The antlr parser generator fragment.
//    		fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
//    		//  options = {
//    		//      backtrack = true
//    		//  }
//    		}
//    
//    		// Xtend-based API for validation
//    		fragment = validation.ValidatorFragment auto-inject {
//    		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//    			composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//    		}
//    
//    		// old scoping and exporting API
//    		// fragment = scoping.ImportURIScopingFragment auto-inject {}
//    		// fragment = exporting.SimpleNamesFragment auto-inject {}
//    
//    		// scoping and exporting API
//    		fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
//    		fragment = exporting.QualifiedNamesFragment auto-inject {}
//    		fragment = builder.BuilderIntegrationFragment auto-inject {}
//    
//    		// generator API
//    		fragment = generator.GeneratorFragment auto-inject {
//    			generateXtendMain = true
//    		}
//    
//    		// formatter API
//    		fragment = formatting.FormatterFragment auto-inject {}
//    
//    		// labeling API
//    		fragment = labeling.LabelProviderFragment auto-inject {}
//    
//    		// outline API
//    		fragment = outline.OutlineTreeProviderFragment auto-inject {}
//    		fragment = outline.QuickOutlineFragment auto-inject {}
//    
//    		// quickfix API
//    		fragment = quickfix.QuickfixProviderFragment auto-inject {}
//    
//    		// content assist API
//    		fragment = contentAssist.ContentAssistFragment auto-inject {}
//    
//    		// generates a more lightweight Antlr parser and lexer tailored for content assist
//    		fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
//    
//    		// generates junit test support classes into Generator#pathTestProject
//    		fragment = junit.Junit4Fragment auto-inject {}
//    
////    		// project wizard (optional)
////    		fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
////    		      generatorProjectName = "${projectName}"
////    		      fileExtension="${fileExtensions}"
////    		}
//    
//    		// rename refactoring
//    		fragment = refactoring.RefactorElementNameFragment auto-inject {}
//    
////    		// provides the necessary bindings for java types integration
////    		fragment = types.TypesGeneratorFragment auto-inject {}
////    
////    		// generates the required bindings only if the grammar inherits from Xbase
////    		fragment = xbase.XbaseGeneratorFragment auto-inject {}
//    
//    		// provides a preference page for template proposals
//    		fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
//    
//    		// provides a compare view
//    		fragment = compare.CompareFragment auto-inject {}
//    	}
//    }
}

