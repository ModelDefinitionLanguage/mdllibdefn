grammar eu.ddmore.mdllib.MdlLib with org.eclipse.xtext.common.Terminals

import "http://eu.ddmore.mdllib/mdllib/MdlLib"
//generate mdlLib "http://eu.ddmore.mdllib/mdllib/MdlLib"


Library:
	{Library} typeDefns += (TypeDefinition|ListTypeDefinition|SubListDefinition)*
	propertyDefns += PropertyDefinitionStatement*
	objectDefns += ObjectDefinition*
	blockDefns += BlockDefinition*
	containDefns += ContainmentDefn*
	funcDefns += FunctionDefinition*
;
	
TypeDefinition:
	'_type' name=ID typeClass=TypeClass ('(' enumArgs+=EnumValue (',' enumArgs+=EnumValue)* ')' )? ';'
;

EnumValue:
	name=ID
;

ObjectDefinition:
	{ObjectDefinition} '_object' name=ID ';'
;

BlockDefinition:
	{BlockDefinition} '_block' name=ID '(' minNum=INT? ',' maxNum=INT? ')'
			('_arguments' arguments+=ArgumentDefinition (',' arguments+=ArgumentDefinition)* )?
			'_statements' '(' minStmtNum=INT? ',' maxStmtNum=INT? ')'
			stmtTypes+=StatementTypeDefn (','  stmtTypes+=StatementTypeDefn)*
			(
				'_prop' (propRefs+=PropertyReference (',' propRefs+=PropertyReference)*| freeProps?='_free')
			)?
			('_list' '_key' '=' keyAttName=ID (
								 listTypeMappings+=AttValListMap (',' listTypeMappings+=AttValListMap)*
								|listType=[ListTypeDefinition]
								)
			)?
			';' 
;

AttValListMap:
	attDefn=[EnumValue|QualifiedName] '->' attType=[ListTypeDefinition]
;

ArgumentDefinition:
	name=ID argType=TypeSpec (optional?='?')?
;

StatementTypeDefn:
	stmtType=StatementType hasRhs?='+'?
;

enum StatementType:
		EQN_DEFN='_eqnDefn'| LIST_DEFN='_listDefn'| ANON_LIST_STMT='_anonList'|ENUM_DEFN='_enumDefn'|
		RV_DEFN='_rvDefn'|PROP_STMT='_propStmt'|
//		CAT_PROP_ASSIGN='_catPropStmt'|
		TRANS_DEFN='_transDefn'
;

ContainmentDefn:
	'_container' parentRef=[BlockContainer] '_has' blkRefs+=[BlockDefinition] (',' blkRefs+=[BlockDefinition])* ';'
;

ListTypeDefinition returns AbstractTypeDefinition:
	{ListTypeDefinition} '_list' name=ID (
			('_alt' altType=[TypeDefinition]|isAnonymous?='_anon')?
			('_extends' superRef=[TypeDefinition])?
			'_atts' attributes+=ListAttributeDefn (',' attributes+=ListAttributeDefn)*
			(isEnumList?='_cat' catAtt=[ListAttributeDefn] catMapType=TypeSpec catMappingOptional?='?'? )?
			'_sig' (sigLists+= ListSignature (',' sigLists+= ListSignature)*)? 
			| ('_alt' altType=[TypeDefinition]) ? isSuper?='_super'
			) 
		';'
;

ListAttributeDefn:
	name=ID  attType=TypeSpec
;

ListSignature:
	{ListSignature} '(' (attRefs+=ListAttributeRef (',' attRefs+=ListAttributeRef)*)? ')'
;

ListAttributeRef:
	attRef=[ListAttributeDefn] optional?='?'? 
;

SubListDefinition returns AbstractTypeDefinition:
	{SubListTypeDefinition} '_sublist' name=ID
			'_atts' attributes+=ListAttributeDefn (',' attributes+=ListAttributeDefn)*
			'_sig' (sigLists+= ListSignature (',' sigLists+= ListSignature)*)? 
		';'
;

PropertyReference:
	propRef=[PropertyDefinition]  optional?='?'? 
;

PropertyDefinitionStatement:
	'_prop' properties+=PropertyDefinition (',' properties+=PropertyDefinition)* ';'
;

PropertyDefinition:
	name=ID  propType=TypeSpec
;


FunctionDefinition:
	{FunctionDefinition} '_func'  defns+= FunctionDefnBody (',' defns+=FunctionDefnBody)* ';'
;

FunctionDefnBody returns SymbolDefinition:
	{FunctionDefnBody} name = ID funcSpec=FunctionSpec
;

FunctionSpec:
	{FunctionSpec}descn=STRING? argument=FuncArgs 
			'_returns' returnType=TypeSpec
;

FuncArgs:
	UnnamedFuncArgs|NamedFuncArgs
;

UnnamedFuncArgs returns FuncArgs:
	{UnnamedFuncArgs} '(' (arguments += FuncArgumentDefinition (=> ',' arguments += FuncArgumentDefinition)*)? ')'
;

FuncArgumentDefinition:
	{FuncArgumentDefinition} name=ID typeSpec=TypeSpec descn=STRING? 
;

NamedFuncArgs returns FuncArgs:
	{NamedFuncArgs} '_named' '(' arguments += FuncArgumentDefinition (=> ',' arguments += FuncArgumentDefinition)* ')'
					('_sig' (sigLists+= SignatureList (',' sigLists+= SignatureList)*))? 
;

SignatureList:
	{SignatureList} '(' (argRefs+=ArgumentRef (',' argRefs+=ArgumentRef)*)? ')'
;

ArgumentRef:
	{ArgumentRef} argRef=[FuncArgumentDefinition] (optional?='?')?
;


TypeSpec:
	{TypeSpec} '::' typeName=[TypeDefinition] ('[' elementType=TypeSpec ']'
												|'[' '[' cellType=TypeSpec ']' ']'
												| '(' argSpecs+=TypeSpec (',' argSpecs+=TypeSpec)* ')' rtnSpec=TypeSpec
											 )?
;


enum TypeClass:
		ENUM='_enum'| SUBLIST='_sublist'| INT='_int'|VECTOR='_vector'|MATRIX='_matrix'|FUNCTION='_function'|REFERENCE='_reference'|
		CATEGORY='_category' | REAL='_real'|STRING='_str' | BOOLEAN='_bool' |DERIV='_deriv'|PDF='_pdf'|PMF='_pmf'|MAPPING='_mapping'|
		UNDEFINED='_undef' | CATEGORY_VALUE="_categoryValue"
	;
	
QualifiedName:
	ID ('.' ID)
;
