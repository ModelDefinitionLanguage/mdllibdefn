grammar eu.ddmore.mdllib.MdlLib with org.eclipse.xtext.common.Terminals

import "http://eu.ddmore.mdllib/mdllib/MdlLib"
//generate mdlLib "http://eu.ddmore.mdllib/mdllib/MdlLib"


Library:
	{Library} typeDefns += TypeDefinition*
	objectDefns += ObjectDefinition*
	blockDefns += BlockDefinition*
	containDefns += ContainmentDefn*
	funcDefns += FunctionDefinition* 	
;
	
TypeDefinition:
	'type' name=ID typeClass=TypeClass ('(' enumArgs+=ID (',' enumArgs+=ID)* ')')? ';'
;

ObjectDefinition:
	{ObjectDefinition} 'object' name=ID ';'
;

BlockDefinition:
	{BlockDefinition} 'block' name=ID '(' minNum=INT? ',' maxNum=INT? ')'
			('arguments' arguments+=ArgumentDefinition (',' arguments+=ArgumentDefinition)* )?
			'statements' '(' minStmtNum=INT? ',' maxStmtNum=INT? ')'
			stmtTypes+=StatementTypeDefn (','  stmtTypes+=StatementTypeDefn)* ';' 
;


ArgumentDefinition:
	name=ID argType=TypeSpec
;

StatementTypeDefn:
	stmtType=StatementType hasRhs?='+'?
;

enum StatementType:
		EQN_DEFN='_eqnDefn'| LIST_DEFN='_listDefn'| ANON_LIST_STMT='_anonList'|ENUM_DEFN='_enumDefn'|
		RV_DEFN='_rvDefn'|PROP_STMT='_propStmt'|CAT_PROP_ASSIGN='_catPropStmt'|TRANS_DEFN='_transDefn'
;

ContainmentDefn:
	'container' parentRef=[BlockContainer] 'has' blkRefs+=[BlockDefinition] (',' blkRefs+=[BlockDefinition])* ';'
;

FunctionDefinition:
	{FunctionDefinition} 'func'  defns+= FunctionDefnBody (',' defns+=FunctionDefnBody)* ';'
;

FunctionDefnBody returns SymbolDefinition:
	{FunctionDefnBody} name = ID funcSpec=FunctionSpec
;

FunctionSpec:
	{FunctionSpec}descn=STRING? argument=FuncArgs 
			'returns' returnType=TypeSpec
;

FuncArgs:
	UnnamedFuncArgs|NamedFuncArgs
;

UnnamedFuncArgs returns FuncArgs:
	{UnnamedFuncArgs} '(' (arguments += FuncArgumentDefinition (=> ',' arguments += FuncArgumentDefinition)*)? ')'
;

FuncArgumentDefinition:
	{FuncArgumentDefinition} name=ID typeSpec=TypeSpec descn=STRING? 
;

NamedFuncArgs returns FuncArgs:
	{NamedFuncArgs} 'named' '(' arguments += FuncArgumentDefinition (=> ',' arguments += FuncArgumentDefinition)* ')'
					('sig' (sigLists+= SignatureList (',' sigLists+= SignatureList)*))? 
;

SignatureList:
	{SignatureList} '(' (argRefs+=ArgumentRef (',' argRefs+=ArgumentRef)*)? ')'
;

ArgumentRef:
	{ArgumentRef} argRef=[FuncArgumentDefinition] (optional?='?')?
;


TypeSpec:
	{TypeSpec} '::' typeName=[TypeDefinition] ('[' elementType=TypeSpec ']'|'[' '[' cellType=TypeSpec ']' ']')? //| functionSpec=FunctionSpec)?
;


enum TypeClass:
		ENUM='_enum'| SUBLIST='_sublist'| SCALAR='_scalar'|VECTOR='_vector'|MATRIX='_matrix'|FUNCTION='_function'|REFERENCE='_reference'|
		CATEGORY='_category' | LIST='_list'
	;