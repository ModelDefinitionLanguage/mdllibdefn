/*
 * generated by Xtext
 */
grammar InternalMdlLib;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.ddmore.mdllib.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.ddmore.mdllib.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.ddmore.mdllib.services.MdlLibGrammarAccess;

}

@parser::members {

 	private MdlLibGrammarAccess grammarAccess;
 	
    public InternalMdlLibParser(TokenStream input, MdlLibGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Library";	
   	}
   	
   	@Override
   	protected MdlLibGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLibrary
entryRuleLibrary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryRule()); }
	 iv_ruleLibrary=ruleLibrary 
	 { $current=$iv_ruleLibrary.current; } 
	 EOF 
;

// Rule Library
ruleLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLibraryAccess().getLibraryAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getTypeDefnsTypeDefinitionParserRuleCall_1_0()); 
	    }
		lv_typeDefns_1_0=ruleTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryRule());
	        }
       		add(
       			$current, 
       			"typeDefns",
        		lv_typeDefns_1_0, 
        		"eu.ddmore.mdllib.MdlLib.TypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getFuncDefnsFunctionDefinitionParserRuleCall_2_0()); 
	    }
		lv_funcDefns_2_0=ruleFunctionDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryRule());
	        }
       		add(
       			$current, 
       			"funcDefns",
        		lv_funcDefns_2_0, 
        		"eu.ddmore.mdllib.MdlLib.FunctionDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDefinitionAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getTypeClassTypeClassEnumRuleCall_2_0()); 
	    }
		lv_typeClass_2_0=ruleTypeClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"typeClass",
        		lv_typeClass_2_0, 
        		"eu.ddmore.mdllib.MdlLib.TypeClass");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDefinitionAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		lv_enumArgs_4_0=RULE_ID
		{
			newLeafNode(lv_enumArgs_4_0, grammarAccess.getTypeDefinitionAccess().getEnumArgsIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefinitionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"enumArgs",
        		lv_enumArgs_4_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeDefinitionAccess().getCommaKeyword_3_2_0());
    }
(
(
		lv_enumArgs_6_0=RULE_ID
		{
			newLeafNode(lv_enumArgs_6_0, grammarAccess.getTypeDefinitionAccess().getEnumArgsIDTerminalRuleCall_3_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefinitionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"enumArgs",
        		lv_enumArgs_6_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeDefinitionAccess().getRightParenthesisKeyword_3_3());
    }
)?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	 iv_ruleFunctionDefinition=ruleFunctionDefinition 
	 { $current=$iv_ruleFunctionDefinition.current; } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionDefinitionAccess().getFunctionDefinitionAction_0(),
            $current);
    }
)	otherlv_1='func' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDefinitionAccess().getFuncKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getDefnsFunctionDefnBodyParserRuleCall_2_0()); 
	    }
		lv_defns_2_0=ruleFunctionDefnBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"defns",
        		lv_defns_2_0, 
        		"eu.ddmore.mdllib.MdlLib.FunctionDefnBody");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getDefnsFunctionDefnBodyParserRuleCall_3_1_0()); 
	    }
		lv_defns_4_0=ruleFunctionDefnBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"defns",
        		lv_defns_4_0, 
        		"eu.ddmore.mdllib.MdlLib.FunctionDefnBody");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleFunctionDefnBody
entryRuleFunctionDefnBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDefnBodyRule()); }
	 iv_ruleFunctionDefnBody=ruleFunctionDefnBody 
	 { $current=$iv_ruleFunctionDefnBody.current; } 
	 EOF 
;

// Rule FunctionDefnBody
ruleFunctionDefnBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionDefnBodyAccess().getFunctionDefnBodyAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionDefnBodyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDefnBodyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefnBodyAccess().getFuncSpecFunctionSpecParserRuleCall_2_0()); 
	    }
		lv_funcSpec_2_0=ruleFunctionSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefnBodyRule());
	        }
       		set(
       			$current, 
       			"funcSpec",
        		lv_funcSpec_2_0, 
        		"eu.ddmore.mdllib.MdlLib.FunctionSpec");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionSpec
entryRuleFunctionSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionSpecRule()); }
	 iv_ruleFunctionSpec=ruleFunctionSpec 
	 { $current=$iv_ruleFunctionSpec.current; } 
	 EOF 
;

// Rule FunctionSpec
ruleFunctionSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionSpecAccess().getFunctionSpecAction_0(),
            $current);
    }
)(
(
		lv_descn_1_0=RULE_STRING
		{
			newLeafNode(lv_descn_1_0, grammarAccess.getFunctionSpecAccess().getDescnSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionSpecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"descn",
        		lv_descn_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionSpecAccess().getArgumentFuncArgsParserRuleCall_2_0()); 
	    }
		lv_argument_2_0=ruleFuncArgs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionSpecRule());
	        }
       		set(
       			$current, 
       			"argument",
        		lv_argument_2_0, 
        		"eu.ddmore.mdllib.MdlLib.FuncArgs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='returns' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionSpecAccess().getReturnsKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionSpecAccess().getReturnTypeTypeSpecParserRuleCall_4_0()); 
	    }
		lv_returnType_4_0=ruleTypeSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionSpecRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_4_0, 
        		"eu.ddmore.mdllib.MdlLib.TypeSpec");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFuncArgs
entryRuleFuncArgs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFuncArgsRule()); }
	 iv_ruleFuncArgs=ruleFuncArgs 
	 { $current=$iv_ruleFuncArgs.current; } 
	 EOF 
;

// Rule FuncArgs
ruleFuncArgs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFuncArgsAccess().getUnnamedFuncArgsParserRuleCall_0()); 
    }
    this_UnnamedFuncArgs_0=ruleUnnamedFuncArgs
    { 
        $current = $this_UnnamedFuncArgs_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFuncArgsAccess().getNamedFuncArgsParserRuleCall_1()); 
    }
    this_NamedFuncArgs_1=ruleNamedFuncArgs
    { 
        $current = $this_NamedFuncArgs_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnnamedFuncArgs
entryRuleUnnamedFuncArgs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnnamedFuncArgsRule()); }
	 iv_ruleUnnamedFuncArgs=ruleUnnamedFuncArgs 
	 { $current=$iv_ruleUnnamedFuncArgs.current; } 
	 EOF 
;

// Rule UnnamedFuncArgs
ruleUnnamedFuncArgs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedFuncArgsAccess().getUnnamedFuncArgsAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedFuncArgsAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedFuncArgsAccess().getArgumentsFuncArgumentDefinitionParserRuleCall_2_0_0()); 
	    }
		lv_arguments_2_0=ruleFuncArgumentDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedFuncArgsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"eu.ddmore.mdllib.MdlLib.FuncArgumentDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	',' 
)=>	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnnamedFuncArgsAccess().getCommaKeyword_2_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedFuncArgsAccess().getArgumentsFuncArgumentDefinitionParserRuleCall_2_1_1_0()); 
	    }
		lv_arguments_4_0=ruleFuncArgumentDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedFuncArgsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"eu.ddmore.mdllib.MdlLib.FuncArgumentDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnnamedFuncArgsAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFuncArgumentDefinition
entryRuleFuncArgumentDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFuncArgumentDefinitionRule()); }
	 iv_ruleFuncArgumentDefinition=ruleFuncArgumentDefinition 
	 { $current=$iv_ruleFuncArgumentDefinition.current; } 
	 EOF 
;

// Rule FuncArgumentDefinition
ruleFuncArgumentDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFuncArgumentDefinitionAccess().getFuncArgumentDefinitionAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFuncArgumentDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFuncArgumentDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFuncArgumentDefinitionAccess().getTypeSpecTypeSpecParserRuleCall_2_0()); 
	    }
		lv_typeSpec_2_0=ruleTypeSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFuncArgumentDefinitionRule());
	        }
       		set(
       			$current, 
       			"typeSpec",
        		lv_typeSpec_2_0, 
        		"eu.ddmore.mdllib.MdlLib.TypeSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_descn_3_0=RULE_STRING
		{
			newLeafNode(lv_descn_3_0, grammarAccess.getFuncArgumentDefinitionAccess().getDescnSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFuncArgumentDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"descn",
        		lv_descn_3_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)?)
;





// Entry rule entryRuleNamedFuncArgs
entryRuleNamedFuncArgs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedFuncArgsRule()); }
	 iv_ruleNamedFuncArgs=ruleNamedFuncArgs 
	 { $current=$iv_ruleNamedFuncArgs.current; } 
	 EOF 
;

// Rule NamedFuncArgs
ruleNamedFuncArgs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNamedFuncArgsAccess().getNamedFuncArgsAction_0(),
            $current);
    }
)	otherlv_1='named' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedFuncArgsAccess().getNamedKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNamedFuncArgsAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedFuncArgsAccess().getArgumentsFuncArgumentDefinitionParserRuleCall_3_0()); 
	    }
		lv_arguments_3_0=ruleFuncArgumentDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedFuncArgsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"eu.ddmore.mdllib.MdlLib.FuncArgumentDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	',' 
)=>	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNamedFuncArgsAccess().getCommaKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedFuncArgsAccess().getArgumentsFuncArgumentDefinitionParserRuleCall_4_1_0()); 
	    }
		lv_arguments_5_0=ruleFuncArgumentDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedFuncArgsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"eu.ddmore.mdllib.MdlLib.FuncArgumentDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNamedFuncArgsAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_7='sig' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNamedFuncArgsAccess().getSigKeyword_6_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNamedFuncArgsAccess().getSigListsSignatureListParserRuleCall_6_1_0_0()); 
	    }
		lv_sigLists_8_0=ruleSignatureList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedFuncArgsRule());
	        }
       		add(
       			$current, 
       			"sigLists",
        		lv_sigLists_8_0, 
        		"eu.ddmore.mdllib.MdlLib.SignatureList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNamedFuncArgsAccess().getCommaKeyword_6_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedFuncArgsAccess().getSigListsSignatureListParserRuleCall_6_1_1_1_0()); 
	    }
		lv_sigLists_10_0=ruleSignatureList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedFuncArgsRule());
	        }
       		add(
       			$current, 
       			"sigLists",
        		lv_sigLists_10_0, 
        		"eu.ddmore.mdllib.MdlLib.SignatureList");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?)
;





// Entry rule entryRuleSignatureList
entryRuleSignatureList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignatureListRule()); }
	 iv_ruleSignatureList=ruleSignatureList 
	 { $current=$iv_ruleSignatureList.current; } 
	 EOF 
;

// Rule SignatureList
ruleSignatureList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignatureListAccess().getSignatureListAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignatureListAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureListAccess().getArgRefsArgumentRefParserRuleCall_2_0_0()); 
	    }
		lv_argRefs_2_0=ruleArgumentRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureListRule());
	        }
       		add(
       			$current, 
       			"argRefs",
        		lv_argRefs_2_0, 
        		"eu.ddmore.mdllib.MdlLib.ArgumentRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSignatureListAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureListAccess().getArgRefsArgumentRefParserRuleCall_2_1_1_0()); 
	    }
		lv_argRefs_4_0=ruleArgumentRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureListRule());
	        }
       		add(
       			$current, 
       			"argRefs",
        		lv_argRefs_4_0, 
        		"eu.ddmore.mdllib.MdlLib.ArgumentRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSignatureListAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleArgumentRef
entryRuleArgumentRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRefRule()); }
	 iv_ruleArgumentRef=ruleArgumentRef 
	 { $current=$iv_ruleArgumentRef.current; } 
	 EOF 
;

// Rule ArgumentRef
ruleArgumentRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentRefAccess().getArgumentRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getArgumentRefAccess().getArgRefFuncArgumentDefinitionCrossReference_1_0()); 
	}

)
)(
(
		lv_optional_2_0=	'?' 
    {
        newLeafNode(lv_optional_2_0, grammarAccess.getArgumentRefAccess().getOptionalQuestionMarkKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRefRule());
	        }
       		setWithLastConsumed($current, "optional", true, "?");
	    }

)
)?)
;





// Entry rule entryRuleTypeSpec
entryRuleTypeSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSpecRule()); }
	 iv_ruleTypeSpec=ruleTypeSpec 
	 { $current=$iv_ruleTypeSpec.current; } 
	 EOF 
;

// Rule TypeSpec
ruleTypeSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeSpecAccess().getTypeSpecAction_0(),
            $current);
    }
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeSpecAccess().getColonColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTypeSpecAccess().getTypeNameTypeDefinitionCrossReference_2_0()); 
	}

)
)((	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeSpecAccess().getLeftSquareBracketKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeSpecAccess().getElementTypeTypeSpecParserRuleCall_3_0_1_0()); 
	    }
		lv_elementType_4_0=ruleTypeSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSpecRule());
	        }
       		set(
       			$current, 
       			"elementType",
        		lv_elementType_4_0, 
        		"eu.ddmore.mdllib.MdlLib.TypeSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeSpecAccess().getRightSquareBracketKeyword_3_0_2());
    }
)
    |(	otherlv_6='[[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeSpecAccess().getLeftSquareBracketLeftSquareBracketKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeSpecAccess().getCellTypeTypeSpecParserRuleCall_3_1_1_0()); 
	    }
		lv_cellType_7_0=ruleTypeSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSpecRule());
	        }
       		set(
       			$current, 
       			"cellType",
        		lv_cellType_7_0, 
        		"eu.ddmore.mdllib.MdlLib.TypeSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=']]' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypeSpecAccess().getRightSquareBracketRightSquareBracketKeyword_3_1_2());
    }
))?)
;





// Rule TypeClass
ruleTypeClass returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='_enum' 
	{
        $current = grammarAccess.getTypeClassAccess().getENUMEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeClassAccess().getENUMEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='_sublist' 
	{
        $current = grammarAccess.getTypeClassAccess().getSUBLISTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeClassAccess().getSUBLISTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='_scalar' 
	{
        $current = grammarAccess.getTypeClassAccess().getSCALAREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTypeClassAccess().getSCALAREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='_vector' 
	{
        $current = grammarAccess.getTypeClassAccess().getVECTOREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTypeClassAccess().getVECTOREnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='_matrix' 
	{
        $current = grammarAccess.getTypeClassAccess().getMATRIXEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTypeClassAccess().getMATRIXEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='_function' 
	{
        $current = grammarAccess.getTypeClassAccess().getFUNCTIONEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTypeClassAccess().getFUNCTIONEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='_reference' 
	{
        $current = grammarAccess.getTypeClassAccess().getREFERENCEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getTypeClassAccess().getREFERENCEEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='_category' 
	{
        $current = grammarAccess.getTypeClassAccess().getCATEGORYEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getTypeClassAccess().getCATEGORYEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='_list' 
	{
        $current = grammarAccess.getTypeClassAccess().getLISTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getTypeClassAccess().getLISTEnumLiteralDeclaration_8()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


